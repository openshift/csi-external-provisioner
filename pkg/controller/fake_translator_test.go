// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/kubernetes-csi/external-provisioner/v5/pkg/controller (interfaces: ProvisionerCSITranslator)

package controller

import (
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/storage/v1"
)

// MockProvisionerCSITranslator is a mock of ProvisionerCSITranslator interface.
type MockProvisionerCSITranslator struct {
	ctrl     *gomock.Controller
	recorder *MockProvisionerCSITranslatorMockRecorder
}

// MockProvisionerCSITranslatorMockRecorder is the mock recorder for MockProvisionerCSITranslator.
type MockProvisionerCSITranslatorMockRecorder struct {
	mock *MockProvisionerCSITranslator
}

// NewMockProvisionerCSITranslator creates a new mock instance.
func NewMockProvisionerCSITranslator(ctrl *gomock.Controller) *MockProvisionerCSITranslator {
	mock := &MockProvisionerCSITranslator{ctrl: ctrl}
	mock.recorder = &MockProvisionerCSITranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvisionerCSITranslator) EXPECT() *MockProvisionerCSITranslatorMockRecorder {
	return m.recorder
}

// GetInTreeNameFromCSIName mocks base method.
func (m *MockProvisionerCSITranslator) GetInTreeNameFromCSIName(pluginName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInTreeNameFromCSIName", pluginName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInTreeNameFromCSIName indicates an expected call of GetInTreeNameFromCSIName.
func (mr *MockProvisionerCSITranslatorMockRecorder) GetInTreeNameFromCSIName(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInTreeNameFromCSIName", reflect.TypeOf((*MockProvisionerCSITranslator)(nil).GetInTreeNameFromCSIName), pluginName)
}

// IsMigratedCSIDriverByName mocks base method.
func (m *MockProvisionerCSITranslator) IsMigratedCSIDriverByName(csiPluginName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMigratedCSIDriverByName", csiPluginName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMigratedCSIDriverByName indicates an expected call of IsMigratedCSIDriverByName.
func (mr *MockProvisionerCSITranslatorMockRecorder) IsMigratedCSIDriverByName(csiPluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMigratedCSIDriverByName", reflect.TypeOf((*MockProvisionerCSITranslator)(nil).IsMigratedCSIDriverByName), csiPluginName)
}

// IsPVMigratable mocks base method.
func (m *MockProvisionerCSITranslator) IsPVMigratable(pv *v1.PersistentVolume) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPVMigratable", pv)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPVMigratable indicates an expected call of IsPVMigratable.
func (mr *MockProvisionerCSITranslatorMockRecorder) IsPVMigratable(pv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPVMigratable", reflect.TypeOf((*MockProvisionerCSITranslator)(nil).IsPVMigratable), pv)
}

// TranslateCSIPVToInTree mocks base method.
func (m *MockProvisionerCSITranslator) TranslateCSIPVToInTree(pv *v1.PersistentVolume) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateCSIPVToInTree", pv)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateCSIPVToInTree indicates an expected call of TranslateCSIPVToInTree.
func (mr *MockProvisionerCSITranslatorMockRecorder) TranslateCSIPVToInTree(pv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateCSIPVToInTree", reflect.TypeOf((*MockProvisionerCSITranslator)(nil).TranslateCSIPVToInTree), pv)
}

// TranslateInTreePVToCSI mocks base method.
func (m *MockProvisionerCSITranslator) TranslateInTreePVToCSI(logger logr.Logger, pv *v1.PersistentVolume) (*v1.PersistentVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateInTreePVToCSI", logger, pv)
	ret0, _ := ret[0].(*v1.PersistentVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateInTreePVToCSI indicates an expected call of TranslateInTreePVToCSI.
func (mr *MockProvisionerCSITranslatorMockRecorder) TranslateInTreePVToCSI(logger, pv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateInTreePVToCSI", reflect.TypeOf((*MockProvisionerCSITranslator)(nil).TranslateInTreePVToCSI), logger, pv)
}

// TranslateInTreeStorageClassToCSI mocks base method.
func (m *MockProvisionerCSITranslator) TranslateInTreeStorageClassToCSI(logger logr.Logger, inTreePluginName string, sc *v10.StorageClass) (*v10.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateInTreeStorageClassToCSI", logger, inTreePluginName, sc)
	ret0, _ := ret[0].(*v10.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateInTreeStorageClassToCSI indicates an expected call of TranslateInTreeStorageClassToCSI.
func (mr *MockProvisionerCSITranslatorMockRecorder) TranslateInTreeStorageClassToCSI(logger, inTreePluginName, sc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateInTreeStorageClassToCSI", reflect.TypeOf((*MockProvisionerCSITranslator)(nil).TranslateInTreeStorageClassToCSI), logger, inTreePluginName, sc)
}
